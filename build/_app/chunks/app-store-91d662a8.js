var N=Object.defineProperty,q=Object.defineProperties;var H=Object.getOwnPropertyDescriptors;var W=Object.getOwnPropertySymbols;var J=Object.prototype.hasOwnProperty,B=Object.prototype.propertyIsEnumerable;var z=(e,t,r)=>t in e?N(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,d=(e,t)=>{for(var r in t||(t={}))J.call(t,r)&&z(e,r,t[r]);if(W)for(var r of W(t))B.call(t,r)&&z(e,r,t[r]);return e},_=(e,t)=>q(e,H(t));import{a4 as K,a5 as M,a6 as Q,a7 as h,a8 as X,a9 as Y,aa as Z,ab as ee,ac as y,ad as te,ae as re,af as se,ag as ne,ah as ae,ai as ie,aj as oe,ak as ce,al as m,am as ue,an as le,ao as p,ap as E,aq as de,C as O}from"./vendor-fb0c71c8.js";const he=!0;let R=!1,l,b,S;function we(e,t){return R||(R=!0,l=K(e),b=M(l),S=Q(l),t&&t({app:l,auth:b,db:S})),{app:l,auth:b,db:S}}let i,u,w;async function D(){const t=await(await fetch("/firebase.config.json")).json();w=t.functionsHost,console.debug("configured functions host:",w);const r=we(t,({auth:n})=>{h(n,s=>{j.forEach(a=>a(s))})});i=r.auth,u=r.db}let f={user:void 0,userStudies:void 0,onboarded:!1},U,T;function k(e){U=m(u,"users",e),T=e}function fe(){return X(U)}function v(e,t=!0){return ce(U,e,{merge:t})}async function ge(e,t,r=!0){const n=m(u,"users",T,"studies",e);await ue(n,t,{merge:r})}async function x(){return(await le(p(u,"studies"))).docs.map(t=>t.data())}const $=[],j=[];function P(e){f=de(f,e),$.forEach(t=>t(f))}async function C(e){E(m(u,"users",e.uid),t=>{const r=t.data();P(n=>{n.user=r})})}async function A(e){const t=p(u,"users",e.uid,"studies");E(t,r=>{const n={};r.forEach(s=>{const a=s.data();n[a.studyId]=a}),P(s=>{s.userStudies=n})})}function ye(){E(p(u,"studies"),e=>{const t=[];e.forEach(function(r){t.push(r.data())}),P(r=>{r.studies=t})})}var F={async initialize(e=!0){if(e){await D();async function a(o){switch(console.log("message from content script received:",o.type,o),o.type){case"rally-sdk.complete-signup":const c=o.detail;if(!c)throw new Error("handling rally-sdk.complete-signup from content script: No study ID provided.");if(w===void 0)throw new Error("Firebase Functions host not defined, cannot generate JWTs for extensions.");if(!(await x()).filter(g=>g.studyId===c))throw new Error(`Received rally-sdk.complete-signup for non-existent study: ${c}`);const V=await(await new Promise(g=>{h(i,L=>{g(L)})})).getIdToken(),I=JSON.stringify({studyId:c,idToken:V}),G=(await(await fetch(`${w}/rallytoken`,{method:"POST",headers:{"Content-Type":"application/json"},body:I})).json()).rallyToken;console.debug("dispatching rally-sdk.complete-signup-response with token"),window.dispatchEvent(new CustomEvent("rally-sdk.complete-signup-response",{detail:{studyId:c,rallyToken:G}}));break;case"rally-sdk.web-check-response":console.debug("Received rally-sdk.web-check-response.");break;default:console.warn(`Unknown message received from content script: ${o.type}`)}}window.addEventListener("rally-sdk.complete-signup",a),window.addEventListener("rally-sdk.web-check-response",a)}else return;const t={};let r;const n=await new Promise(a=>{h(i,o=>{a(o)})});n!==null&&(k(n.uid),r=await fe(),r=r.data(),C(n),A(n),console.debug("initialized, dispatching rally-sdk.web-check"),window.dispatchEvent(new CustomEvent("rally-sdk.web-check",{})));let s=await x();return ye(),t._initialized=!0,r&&(t.user=r),s&&(t.studies=s),t},async onAuthStateChanged(e){await D(),h(i,e)},async loginWithGoogle(){const e=new Y;e.setCustomParameters({prompt:"select_account"});let t;try{t=await Z(i,e)}catch(r){console.error("there was an error",r)}console.debug("Logged in as",t.user.email),k(t.user.uid),C(t.user),A(t.user),console.debug("initialized, dispatching rally-sdk.web-check"),window.dispatchEvent(new CustomEvent("rally-sdk.web-check",{}))},async loginWithEmailAndPassword(e,t){let r;try{r=await ee(i,e,t)}catch(n){console.error("there was an error",n),localStorage.setItem("signInErr",n);return}r.user.emailVerified?(k(r.user.uid),C(r.user),A(r.user),console.debug("initialized, dispatching rally-sdk.web-check"),window.dispatchEvent(new CustomEvent("rally-sdk.web-check",{}))):(console.warn("Email account not verified, sending verification email"),localStorage.setItem("signInErr","Email account not verified"),await y(r.user))},async signupWithEmailAndPassword(e,t){let r;try{r=await te(i,e,t)}catch(n){console.error("there was an error",n),localStorage.setItem("createErr",n);return}console.info("Sending verification email"),await y(r.user)},async signOutUser(){try{re(i),console.info("Signing out")}catch(e){console.error("there was an error",e);return}},async sendUserPasswordResetEmail(e){try{await se(i,e),console.info("Sending password reset email")}catch(t){console.error("there was an error",t),localStorage.setItem("resetPasswordErr",t);return}},async resetUserPassword(e,t){this.reauthenticateUser(t);try{const r=i.currentUser;await ne(r,e),console.info("reset password")}catch(r){console.error("there was an error",r);return}},async changeEmail(e,t){const r=i.currentUser;this.reauthenticateUser(t);try{await ae(i.currentUser,e),r.emailVerified||await y(r),console.info("email changed!")}catch(n){console.error("there was an error",n);return}},async reauthenticateUser(e){const t=i.currentUser,r=ie.credential(t.email,e);await oe(t,r)},async isUserVerified(){const e=await i.currentUser;try{return!!e.emailVerified}catch(t){console.error("there was an error",t)}},async getUserEmail(){const e=await i.currentUser;try{return e.email}catch(t){console.error("there was an error",t)}},async updateOnboardedStatus(e){return v({onboarded:e})},async updateStudyEnrollment(e,t,r){const n=!!r,s=d({},f.userStudies||{});return e in s||(s[e]={}),s[e]=d({},s[e]),s[e].enrolled=t,s[e].studyId=e,s[e].attached=n,t&&(s[e].joinedOn=new Date),await ge(e,s[e]),!0},async updatePlatformEnrollment(e){return v({enrolled:e})},async updateDemographicSurvey(e){return v({demographicsData:e})},onAuthChange(e){j.push(e)},onNextState(e){$.push(e)}};function me(e=F){const t=O({_initialized:!1}),{subscribe:r,set:n}=t;return e.initialize(he).then(s=>{n(s)}),e.onNextState(s=>{const a=_(d({},s),{_initialized:!0});n(a)}),{subscribe:r,set:n,async loginWithGoogle(){return e.loginWithGoogle()},async loginWithEmailAndPassword(s,a){return e.loginWithEmailAndPassword(s,a)},async signupWithEmailAndPassword(s,a){return e.signupWithEmailAndPassword(s,a)},async signOutUser(){return e.signOutUser()},async sendUserPasswordResetEmail(s){return e.sendUserPasswordResetEmail(s)},async resetUserPassword(s,a){return e.resetUserPassword(s,a)},async changeEmail(s,a){return e.changeEmail(s,a)},async isUserVerified(){return e.isUserVerified()},async getUserEmail(){return e.getUserEmail()},async updateOnboardedStatus(s){return e.updateOnboardedStatus(s)},async updateStudyEnrollment(s,a){const o=!!a;console.debug(`Rally - changing study ${s} enrollment to ${o}`);try{return await e.updateStudyEnrollment(s,o)}catch(c){console.error(c)}},async updatePlatformEnrollment(s){const a=!!s;console.debug(`Rally - changing enrollment to ${a}`);try{return await e.updatePlatformEnrollment(a)}catch(o){console.error(o)}},async updateDemographicSurvey(s){try{await e.updateDemographicSurvey(s)}catch(a){console.error("Rally - failed to update the demographic survey",a)}}}}function pe(){const{subscribe:e,set:t}=O(void 0);return F.onAuthStateChanged(r=>{t(r!==null)}),{subscribe:e}}const Pe=pe(),Ce=me();export{Pe as i,Ce as s};
