var N=Object.defineProperty,q=Object.defineProperties;var H=Object.getOwnPropertyDescriptors;var W=Object.getOwnPropertySymbols;var J=Object.prototype.hasOwnProperty,B=Object.prototype.propertyIsEnumerable;var z=(e,t,r)=>t in e?N(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,d=(e,t)=>{for(var r in t||(t={}))J.call(t,r)&&z(e,r,t[r]);if(W)for(var r of W(t))B.call(t,r)&&z(e,r,t[r]);return e},_=(e,t)=>q(e,H(t));import{a5 as K,a6 as M,a7 as Q,a8 as h,a9 as X,aa as Y,ab as Z,ac as ee,ad as m,ae as te,af as re,ag as se,ah as ne,ai as ae,aj as ie,ak as oe,al as y,am as ce,an as le,ao as p,ap as E,aq as ue,C as R}from"./vendor-199f86ca.js";const de=!0;let D=!1,u,b,S;function he(e,t){return D||(D=!0,u=K(e),b=M(u),S=Q(u),t&&t({app:u,auth:b,db:S})),{app:u,auth:b,db:S}}let i,l,w;async function T(){const t=await(await fetch("/firebase.config.json")).json();w=t.functionsHost,console.debug("configured functions host:",w);const r=he(t,({auth:n})=>{h(n,s=>{F.forEach(a=>a(s))})});i=r.auth,l=r.db}let f={user:void 0,userStudies:void 0,onboarded:!1},k,x;function U(e){k=y(l,"users",e),x=e}function we(){return X(k)}function v(e,t=!0){return oe(k,e,{merge:t})}async function fe(e,t,r=!0){const n=y(l,"users",x,"studies",e);await ce(n,t,{merge:r})}async function $(){return(await le(p(l,"studies"))).docs.map(t=>t.data())}const j=[],F=[];function P(e){f=ue(f,e),j.forEach(t=>t(f))}async function C(e){E(y(l,"users",e.uid),t=>{const r=t.data();P(n=>{n.user=r})})}async function A(e){const t=p(l,"users",e.uid,"studies");E(t,r=>{const n={};r.forEach(s=>{const a=s.data();n[a.studyId]=a}),P(s=>{s.userStudies=n})})}function ge(){E(p(l,"studies"),e=>{const t=[];e.forEach(function(r){t.push(r.data())}),P(r=>{r.studies=t})})}var O={async initialize(e=!0){if(e){await T();async function a(o){switch(console.log("message from content script received:",o.type,o),o.type){case"rally-sdk.complete-signup":const c=o.detail;if(!c)throw new Error("handling rally-sdk.complete-signup from content script: No study ID provided.");if(w===void 0)throw new Error("Firebase Functions host not defined, cannot generate JWTs for extensions.");if(!(await $()).filter(g=>g.studyId===c))throw new Error(`Received rally-sdk.complete-signup for non-existent study: ${c}`);const V=await(await new Promise(g=>{h(i,L=>{g(L)})})).getIdToken(),I=JSON.stringify({studyId:c,idToken:V}),G=(await(await fetch(`${w}/rallytoken`,{method:"POST",headers:{"Content-Type":"application/json"},body:I})).json()).rallyToken;console.debug("dispatching rally-sdk.complete-signup-response with token"),window.dispatchEvent(new CustomEvent("rally-sdk.complete-signup-response",{detail:{studyId:c,rallyToken:G}}));break;case"rally-sdk.web-check-response":console.debug("Received rally-sdk.web-check-response.");break;default:console.warn(`Unknown message received from content script: ${o.type}`)}}window.addEventListener("rally-sdk.complete-signup",a),window.addEventListener("rally-sdk.web-check-response",a)}else return;const t={};let r;const n=await new Promise(a=>{h(i,o=>{a(o)})});n!==null&&(U(n.uid),r=await we(),r=r.data(),C(n),A(n),console.debug("initialized, dispatching rally-sdk.web-check"),window.dispatchEvent(new CustomEvent("rally-sdk.web-check",{})));let s=await $();return ge(),t._initialized=!0,r&&(t.user=r),s&&(t.studies=s),t},async onAuthStateChanged(e){await T(),h(i,e)},async loginWithGoogle(){const e=new Y;e.setCustomParameters({prompt:"select_account"});let t;try{t=await Z(i,e)}catch(r){console.error("there was an error",r)}console.debug("Logged in as",t.user.email),U(t.user.uid),C(t.user),A(t.user),console.debug("initialized, dispatching rally-sdk.web-check"),window.dispatchEvent(new CustomEvent("rally-sdk.web-check",{}))},async loginWithEmailAndPassword(e,t){let r;try{r=await ee(i,e,t)}catch(n){console.error("there was an error",n),localStorage.setItem("signInErr",n);return}r.user.emailVerified?(U(r.user.uid),C(r.user),A(r.user),console.debug("initialized, dispatching rally-sdk.web-check"),window.dispatchEvent(new CustomEvent("rally-sdk.web-check",{}))):(console.warn("Email account not verified, sending verification email"),localStorage.setItem("signInErr","Email account not verified"),await m(r.user))},async signupWithEmailAndPassword(e,t){let r;try{r=await te(i,e,t)}catch(n){console.error("there was an error",n),localStorage.setItem("createErr",n);return}console.info("Sending verification email"),await m(r.user)},async sendUserPasswordResetEmail(e){try{await re(i,e),console.info("Sending password reset email")}catch(t){console.error("there was an error",t),localStorage.setItem("resetPasswordErr",t);return}},async resetUserPassword(e,t){this.reauthenticateUser(t);try{const r=i.currentUser;await se(r,e),console.info("reset password")}catch(r){console.error("there was an error",r);return}},async changeEmail(e,t){const r=i.currentUser;this.reauthenticateUser(t);try{await ne(i.currentUser,e),r.emailVerified||await m(r),console.info("email changed!")}catch(n){console.error("there was an error",n);return}},async reauthenticateUser(e){const t=i.currentUser,r=ae.credential(t.email,e);await ie(t,r)},async isUserVerified(){const e=await i.currentUser;try{return!!e.emailVerified}catch(t){console.error("there was an error",t)}},async getUserEmail(){const e=await i.currentUser;try{return e.email}catch(t){console.error("there was an error",t)}},async updateOnboardedStatus(e){return v({onboarded:e})},async updateStudyEnrollment(e,t,r){const n=!!r,s=d({},f.userStudies||{});return e in s||(s[e]={}),s[e]=d({},s[e]),s[e].enrolled=t,s[e].studyId=e,s[e].attached=n,t&&(s[e].joinedOn=new Date),await fe(e,s[e]),!0},async updatePlatformEnrollment(e){return v({enrolled:e})},async updateDemographicSurvey(e){return v({demographicsData:e})},onAuthChange(e){F.push(e)},onNextState(e){j.push(e)}};function me(e=O){const t=R({_initialized:!1}),{subscribe:r,set:n}=t;return e.initialize(de).then(s=>{n(s)}),e.onNextState(s=>{const a=_(d({},s),{_initialized:!0});n(a)}),{subscribe:r,set:n,async loginWithGoogle(){return e.loginWithGoogle()},async loginWithEmailAndPassword(s,a){return e.loginWithEmailAndPassword(s,a)},async signupWithEmailAndPassword(s,a){return e.signupWithEmailAndPassword(s,a)},async sendUserPasswordResetEmail(s){return e.sendUserPasswordResetEmail(s)},async resetUserPassword(s,a){return e.resetUserPassword(s,a)},async changeEmail(s,a){return e.changeEmail(s,a)},async isUserVerified(){return e.isUserVerified()},async getUserEmail(){return e.getUserEmail()},async updateOnboardedStatus(s){return e.updateOnboardedStatus(s)},async updateStudyEnrollment(s,a){const o=!!a;console.debug(`Rally - changing study ${s} enrollment to ${o}`);try{return await e.updateStudyEnrollment(s,o)}catch(c){console.error(c)}},async updatePlatformEnrollment(s){const a=!!s;console.debug(`Rally - changing enrollment to ${a}`);try{return await e.updatePlatformEnrollment(a)}catch(o){console.error(o)}},async updateDemographicSurvey(s){try{await e.updateDemographicSurvey(s)}catch(a){console.error("Rally - failed to update the demographic survey",a)}}}}function ye(){const{subscribe:e,set:t}=R(void 0);return O.onAuthStateChanged(r=>{t(r!==null)}),{subscribe:e}}const ve=ye(),Pe=me();export{ve as i,Pe as s};
