var H=Object.defineProperty,J=Object.defineProperties;var V=Object.getOwnPropertyDescriptors;var z=Object.getOwnPropertySymbols;var B=Object.prototype.hasOwnProperty,K=Object.prototype.propertyIsEnumerable;var W=(e,t,n)=>t in e?H(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,d=(e,t)=>{for(var n in t||(t={}))B.call(t,n)&&W(e,n,t[n]);if(z)for(var n of z(t))K.call(t,n)&&W(e,n,t[n]);return e},_=(e,t)=>J(e,V(t));import{a5 as M,a6 as Q,a7 as X,a8 as h,a9 as Y,aa as Z,ab as I,ac as ee,ad as U,ae as te,af as ne,ag as g,ah as ae,ai as se,aj as y,ak as m,al as re,C as D}from"./vendor-dcea556b.js";const ie=!0;let T=!1,l,b,S;function oe(e,t){return T||(T=!0,l=M(e),b=Q(l),S=X(l),t&&t({app:l,auth:b,db:S})),{app:l,auth:b,db:S}}let c,u,f;async function x(){const t=await(await fetch("/firebase.config.json")).json();f=t.functionsHost,console.debug("configured functions host:",f);const n=oe(t,({auth:s})=>{h(s,a=>{O.forEach(r=>r(a))})});c=n.auth,u=n.db}let w={user:void 0,userStudies:void 0,onboarded:!1},E,$;function k(e){E=g(u,"users",e),$=e}function ce(){return Y(E)}function v(e,t=!0){return ne(E,e,{merge:t})}async function ue(e,t,n=!0){const s=g(u,"users",$,"studies",e);await ae(s,t,{merge:n})}async function j(){return(await se(y(u,"studies"))).docs.map(t=>t.data())}const F=[],O=[];function C(e){w=re(w,e),F.forEach(t=>t(w))}async function A(e){m(g(u,"users",e.uid),t=>{const n=t.data();C(s=>{s.user=n})})}async function P(e){const t=y(u,"users",e.uid,"studies");m(t,n=>{const s={};n.forEach(a=>{const r=a.data();s[r.studyId]=r}),C(a=>{a.userStudies=s})})}function le(){m(y(u,"studies"),e=>{const t=[];e.forEach(function(n){t.push(n.data())}),C(n=>{n.studies=t})})}var R={async initialize(e=!0){if(e){await x();async function r(i){switch(console.log("message from content script received:",i.type,i),i.type){case"rally-sdk.complete-signup":const o=i.detail;if(!o)throw new Error("handling rally-sdk.complete-signup from content script: No study ID provided.");if(f===void 0)throw new Error("Firebase Functions host not defined, cannot generate JWTs for extensions.");if(!(await j()).filter(p=>p.studyId===o))throw new Error(`Received rally-sdk.complete-signup for non-existent study: ${o}`);const G=await(await new Promise(p=>{h(c,q=>{p(q)})})).getIdToken(),L=JSON.stringify({studyId:o,idToken:G}),N=(await(await fetch(`${f}/rallytoken`,{method:"POST",headers:{"Content-Type":"application/json"},body:L})).json()).rallyToken;console.debug("dispatching rally-sdk.complete-signup-response with token"),window.dispatchEvent(new CustomEvent("rally-sdk.complete-signup-response",{detail:{studyId:o,rallyToken:N}}));break;case"rally-sdk.web-check-response":console.debug("Received rally-sdk.web-check-response.");break;default:console.warn(`Unknown message received from content script: ${i.type}`)}}window.addEventListener("rally-sdk.complete-signup",r),window.addEventListener("rally-sdk.web-check-response",r)}else return;const t={};let n;const s=await new Promise(r=>{h(c,i=>{r(i)})});s!==null&&(k(s.uid),n=await ce(),n=n.data(),A(s),P(s),console.debug("initialized, dispatching rally-sdk.web-check"),window.dispatchEvent(new CustomEvent("rally-sdk.web-check",{})));let a=await j();return le(),t._initialized=!0,n&&(t.user=n),a&&(t.studies=a),t},async onAuthStateChanged(e){await x(),h(c,e)},async loginWithGoogle(){const e=new Z;e.setCustomParameters({prompt:"select_account"});let t;try{t=await I(c,e)}catch(n){console.error("there was an error",n)}console.debug("Logged in as",t.user.email),k(t.user.uid),A(t.user),P(t.user),console.debug("initialized, dispatching rally-sdk.web-check"),window.dispatchEvent(new CustomEvent("rally-sdk.web-check",{}))},async loginWithEmailAndPassword(e,t){let n;try{n=await ee(c,e,t)}catch(s){console.error("there was an error",s);return}n.user.emailVerified?(k(n.user.uid),A(n.user),P(n.user),console.debug("initialized, dispatching rally-sdk.web-check"),window.dispatchEvent(new CustomEvent("rally-sdk.web-check",{}))):(console.warn("Email account not verified, sending verification email"),await U(n.user))},async signupWithEmailAndPassword(e,t){let n;try{n=await te(c,e,t)}catch(s){console.error("there was an error",s);return}console.info("Sending verification email"),await U(n.user)},async updateOnboardedStatus(e){return v({onboarded:e})},async updateStudyEnrollment(e,t,n){const s=!!n,a=d({},w.userStudies||{});return e in a||(a[e]={}),a[e]=d({},a[e]),a[e].enrolled=t,a[e].studyId=e,a[e].attached=s,t&&(a[e].joinedOn=new Date),await ue(e,a[e]),!0},async updatePlatformEnrollment(e){return v({enrolled:e})},async updateDemographicSurvey(e){return v({demographicsData:e})},onAuthChange(e){O.push(e)},onNextState(e){F.push(e)}};function de(e=R){const t=D({_initialized:!1}),{subscribe:n,set:s}=t;return e.initialize(ie).then(a=>{s(a)}),e.onNextState(a=>{const r=_(d({},a),{_initialized:!0});s(r)}),{subscribe:n,set:s,async loginWithGoogle(){return e.loginWithGoogle()},async loginWithEmailAndPassword(a,r){return e.loginWithEmailAndPassword(a,r)},async signupWithEmailAndPassword(a,r){return e.signupWithEmailAndPassword(a,r)},async updateOnboardedStatus(a){return e.updateOnboardedStatus(a)},async updateStudyEnrollment(a,r){const i=!!r;console.debug(`Rally - changing study ${a} enrollment to ${i}`);try{return await e.updateStudyEnrollment(a,i)}catch(o){console.error(o)}},async updatePlatformEnrollment(a){const r=!!a;console.debug(`Rally - changing enrollment to ${r}`);try{return await e.updatePlatformEnrollment(r)}catch(i){console.error(i)}},async updateDemographicSurvey(a){try{await e.updateDemographicSurvey(a)}catch(r){console.error("Rally - failed to update the demographic survey",r)}}}}function he(){const{subscribe:e,set:t}=D(void 0);return R.onAuthStateChanged(n=>{t(n!==null)}),{subscribe:e}}const be=he(),Se=de();export{be as i,Se as s};
