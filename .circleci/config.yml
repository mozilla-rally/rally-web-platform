# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  # The Node.js orb contains a set of prepackaged CircleCI configuration you can utilize
  # Orbs reduce the amount of configuration required for common tasks.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/node
  node: circleci/node@5.0.2

jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/node
    docker:
      - image: cimg/python:3.10.4-node
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      # Checkout the code as the first step.
      - checkout
      - node/install:
          node-version: "16.13"
      - node/install-packages
      - run:
          name: Run lint
          command: npm run lint:functions # TODO - fix the other linters https://github.com/mozilla-rally/rally-web-platform/issues/112
      - run:
          name: Run build
          command: npm run build
      # Save this workspace, will be archived if tests pass before deploy.
      - persist_to_workspace:
          root: .
          paths:
            - .
      - run:
          name: Install Firefox, and dependencies for official Google Chrome package
          command: sudo apt update && sudo apt install firefox default-jre fonts-liberation libgbm1 xdg-utils
      - run:
          name: Download and install official Google Chrome package
          command: wget 'https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb' && sudo dpkg -i google-chrome-stable_current_amd64.deb
      - run:
          name: Run integration tests
          command: npm run test:integration
      - run:
          name: Run cloud function tests
          command: npm run test:functions
      - store_artifacts:
          path: ./screenshots
      - store_artifacts:
          path: ./functions/coverage

  # This archives our deployable assets, before deploy happens.
  archive-site:
    docker:
      - image: cimg/node:15.1
    # re-attach workspace from before tests ran
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Archive Firebase before deploy
          command: |
            zip -r rally-web-platform.zip ./ -i build/\* functions/lib/\* firebase.json firestore.rules
      - store_artifacts:
          path: ./rally-web-platform.zip

  #rally-web platform deploy block. Env variables are defined in rally-web context
  site-deploy:
    parameters:
      project_name:
        type: string
      #default: $PROJECT_ID_STAGE
      project_config:
        type: string
        #default: rally-web-stage
      service_key:
        type: string
        #default: $GCLOUD_SERVICE_KEY
    docker:
      - image: cimg/node:15.1
    # re-attach workspace from before tests ran
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Create Service Account key JSON.
          command: echo << parameters.service_key >> | base64 --decode --ignore-garbage > "$HOME"/gcloud.json
      - run:
          name: Configure Firebase for the deployment project name.
          command: GOOGLE_APPLICATION_CREDENTIALS="$HOME"/gcloud.json ./node_modules/.bin/firebase use --add << parameters.project_name >> && cp config/firebase.config.<< parameters.project_config >>.json build/firebase.config.json
      - run:
          name: Firebase Deploy.
          command: GOOGLE_APPLICATION_CREDENTIALS="$HOME"/gcloud.json ./node_modules/.bin/firebase deploy --project << parameters.project_name >>

workflows:
  # Below is the definition of your workflow.
  # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
  # CircleCI will run this workflow on every commit.
  # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
  version: 2
  build:
    jobs:
      - build-and-test:
          filters:
            tags:
              only: /.*/

      - archive-site:
          requires:
            - build-and-test
          filters:
            tags:
              only: /.*/
            branches:
              only: master

      - site-deploy: # This deploys to our stage site at https://stage.rally-web.nonprod.dataops.mozgcp.net / https://members.rally.allizom.org
          context: rally-web
          name: stage-site-deploy
          project_name: $PROJECT_ID_STAGE
          project_config: rally-web-stage
          service_key: $GCLOUD_SERVICE_KEY
          requires:
            - archive-site
          filters:
            branches:
              only: master

      - site-deploy: # This deploys directly to our prod site at https://prod.rally-web.prod.dataops.mozgcp.net / https://members.rally.mozilla.org
          context: rally-web
          name: prod-site-deploy
          project_name: $PROJECT_ID_PROD
          project_config: rally-web-prod
          service_key: $GCLOUD_SERVICE_KEY
          filters:
            tags:
              only: /.*/
